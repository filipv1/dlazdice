import pandas as pd
import streamlit as st
import re
from datetime import datetime
import os

# Konfigurujeme pandas pro lep≈°√≠ pr√°ci s velk√Ωmi soubory
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

# Funkce pro normalizaci textu p≈ôi porovn√°v√°n√≠
def normalize_text(text):
    if not isinstance(text, str):
        text = str(text)
    # Odstranƒõn√≠ nadbyteƒçn√Ωch mezer, p≈ôevod na mal√° p√≠smena
    return re.sub(r'\s+', '', text.lower())

# NOV√Å FUNKCE: Normalizace OBICIS k√≥d≈Ø
def normalize_obicis(obicis_code):
    """Normalizuje OBICIS k√≥d odstranƒõn√≠m √∫vodn√≠ch nul a mezer"""
    if pd.isna(obicis_code):
        return ""
    
    # P≈ôevedeme na string a odstran√≠me mezery
    code_str = str(obicis_code).strip()
    
    # Odstran√≠me √∫vodn√≠ nuly
    code_normalized = code_str.lstrip('0')
    
    # Pokud je k√≥d pr√°zdn√Ω (byly tam jen nuly), vr√°t√≠me "0"
    if not code_normalized:
        code_normalized = "0"
    
    return code_normalized

# Naƒçten√≠ defaultn√≠ch soubor≈Ø z ko≈ôenov√©ho adres√°≈ôe
@st.cache_data(max_entries=3, ttl=3600)  # Zv√Ω≈°en√Ω cache pro vƒõt≈°√≠ soubory
def nacti_defaultni_soubory():
    try:
        vzor = pd.read_excel('vzor.xlsx')
        vazby_znacek = pd.read_excel('vazby_znacek.xlsx', dtype={'A': str})
        return vzor, vazby_znacek
    except Exception as e:
        st.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ defaultn√≠ch soubor≈Ø: {e}")
        return None, None

# Optimalizovan√° funkce pro naƒçten√≠ velk√Ωch Excel soubor≈Ø
@st.cache_data(max_entries=10, ttl=3600)
def nacti_velky_excel(file_data, file_name):
    """Naƒçte Excel soubor s optimalizac√≠ pro velk√© soubory"""
    try:
        # Pokus√≠me se naƒç√≠st soubor po ƒç√°stech, pokud je velmi velk√Ω
        df = pd.read_excel(
            file_data,
            engine='openpyxl',  # Explicitnƒõ specifikujeme engine
            dtype=str,  # Naƒçteme v≈°e jako string, abychom p≈ôede≈°li probl√©m≈Øm s datov√Ωmi typy
            na_filter=False  # Nezamƒõ≈àujeme pr√°zdn√© bu≈àky za NaN
        )
        
        # Konvertujeme zpƒõt na vhodn√© datov√© typy tam, kde je to pot≈ôeba
        for col in df.columns:
            if df[col].dtype == 'object':
                # Pokus√≠me se p≈ôev√©st ƒç√≠seln√© sloupce
                try:
                    # Testujeme, jestli je mo≈æn√© p≈ôev√©st na ƒç√≠slo
                    pd.to_numeric(df[col], errors='raise')
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                except (ValueError, TypeError):
                    # Pokud ne, nech√°me jako string
                    pass
        
        st.success(f"√öspƒõ≈°nƒõ naƒçten soubor {file_name}: {len(df)} ≈ô√°dk≈Ø, {len(df.columns)} sloupc≈Ø")
        return df
        
    except Exception as e:
        st.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ souboru {file_name}: {e}")
        return None

# Hlavn√≠ funkce pro zpracov√°n√≠ s volitelnou plnou diagnostikou
def zpracuj_soubory(vazby_produktu, vazby_akci, zlm, full_diagnostics=False):
    vzor, vazby_znacek = nacti_defaultni_soubory()
    if vzor is None or vazby_znacek is None:
        return None

    vysledek = pd.DataFrame(columns=vzor.columns)
    
    # P≈ô√≠prava vyhled√°vac√≠ch slovn√≠k≈Ø (index≈Ø)
    st.write("Vytv√°≈ô√≠m indexy pro rychlej≈°√≠ zpracov√°n√≠...")
    
    normalized_vazby_znacek = {normalize_text(row.iloc[2]): row.iloc[0] for _, row in vazby_znacek.iterrows()}
    
    vazby_produktu_dict = {}
    for _, row in vazby_produktu.iterrows():
        key_raw, value_raw = row.iloc[2], row.iloc[0]
        if pd.isna(key_raw) or pd.isna(value_raw):
            continue
        key = str(key_raw).strip()
        vazby_produktu_dict.setdefault(key, []).append(str(value_raw).strip())
    
    zlm_dict = {}
    duplicity_count = 0
    for _, row in zlm.iterrows():
        key_raw = row.iloc[2]
        if pd.isna(key_raw):
            continue
        
        key_original = str(key_raw).strip()
        key_normalized = normalize_obicis(key_original)
        
        if key_normalized in zlm_dict:
            duplicity_count += 1
            continue
            
        zlm_dict[key_normalized] = {
            'kod_zbozi': str(row.iloc[1]),
            'klubova_info': str(row.iloc[12]) if len(row) > 12 else ""
        }
    
    if duplicity_count > 0:
        st.warning(f"Nalezeno a ignorov√°no {duplicity_count} duplicitn√≠ch OBICIS k√≥d≈Ø v ZLM souboru (pou≈æil se prvn√≠ v√Ωskyt).")
    
    st.write(f"Indexy vytvo≈ôeny. Vazby produktu: {len(vazby_produktu_dict)} kl√≠ƒç≈Ø, ZLM: {len(zlm_dict)} kl√≠ƒç≈Ø.")
    
    progress_bar = st.progress(0)
    total_rows = len(vazby_akci)
    
    for index, radek_akce in vazby_akci.iterrows():
        progress_bar.progress((index + 1) / total_rows)
        
        id_dlazdice_raw = radek_akce.iloc[1]
        if pd.isna(id_dlazdice_raw):
            continue
        id_dlazdice = str(id_dlazdice_raw).strip()
        
        obicis_list = vazby_produktu_dict.get(id_dlazdice, [])
        kody_zbozi = []
        klubova_akce = 0
        
        # LOGIKA PRO KLUBovou akci
        ken_sloupec_h = str(radek_akce.iloc[7]).strip() if len(radek_akce) > 7 else ""
        if ken_sloupec_h == "1":
            klubova_akce = 1
        
        zlm_klub_info_values = []
        zlm_condition_met = False
        for obicis in obicis_list:
            obicis_normalized = normalize_obicis(obicis)
            zlm_data = zlm_dict.get(obicis_normalized)
            
            if zlm_data:
                raw_kod = zlm_data['kod_zbozi']
                kody_zbozi.append(str(raw_kod).split('.')[0].zfill(18))
                
                klub_info = zlm_data['klubova_info'].strip()
                zlm_klub_info_values.append(f"'{klub_info}' (z OBICIS {obicis_normalized})")
                if klub_info.upper().startswith("MK"):
                    klubova_akce = 1
                    zlm_condition_met = True
        
        slug = id_dlazdice.lower()
        if slug.startswith("sk"):
            klubova_akce = 1

        # Urƒçen√≠ hodnoty pro sloupec D
        if slug.startswith("te"): column_d_value = "leaflet"
        elif slug.startswith("ma"): column_d_value = "magazine"
        elif slug.startswith("dz"): column_d_value = "longTermDiscount"
        elif slug.startswith("kp"): column_d_value = "coupons"
        else: column_d_value = "leaflet"

        # ## PLN√Å DIAGNOSTIKA (POKUD JE ZAPNUT√Å) ##
        if full_diagnostics:
            st.markdown("---")
            st.write(f"**DIAGNOSTICK√ù P≈òEHLED pro ≈ô√°dek {index+1} (ID dla≈ædice: `{id_dlazdice}`)**")
            
            # Podm√≠nka 1
            st.write(f"- `Podm√≠nka 1 (KEN Sloupec H)`: Nalezen√° hodnota je **'{ken_sloupec_h}'**. Podm√≠nka (`== '1'`) je **{'splnƒõna' if ken_sloupec_h == '1' else 'nesplnƒõna'}**.")
            
            # Podm√≠nka 2
            if not zlm_klub_info_values:
                msg = "Pro OBICIS k√≥dy nebyly v ZLM nalezeny ≈æ√°dn√© relevantn√≠ z√°znamy."
            else:
                msg = f"Nalezen√© hodnoty v ZLM sloupci M: {', '.join(zlm_klub_info_values)}."
            st.write(f"- `Podm√≠nka 2 (ZLM Sloupec M)`: {msg} Podm√≠nka (zaƒç√≠n√° na 'MK') je **{'splnƒõna' if zlm_condition_met else 'nesplnƒõna'}**.")

            # Podm√≠nka 3
            st.write(f"- `Podm√≠nka 3 (ID dla≈ædice)`: Hodnota je **'{slug}'**. Podm√≠nka (`zaƒç√≠n√° na 'sk'`) je **{'splnƒõna' if slug.startswith('sk') else 'nesplnƒõna'}**.")
            
            st.success(f"-> **FIN√ÅLN√ç HODNOTA pro Sloupec B bude: `{klubova_akce}`**")
        
        # Sestaven√≠ ≈ô√°dku
        nazev_znacky = radek_akce.iloc[6]
        id_znacky = normalized_vazby_znacek.get(normalize_text(nazev_znacky), "")
        
        datum_hodnota = radek_akce.iloc[4]
        try:
            datum_string = pd.to_datetime(datum_hodnota).strftime('%Y-%m-%d') if not pd.isna(datum_hodnota) else ""
        except (ValueError, TypeError):
            datum_string = str(datum_hodnota)
        
        novy_radek = {
            vzor.columns[0]: 1,
            vzor.columns[1]: klubova_akce,
            vzor.columns[2]: radek_akce.iloc[5],
            vzor.columns[3]: column_d_value,
            vzor.columns[4]: radek_akce.iloc[16] if len(radek_akce) > 16 else "",
            vzor.columns[5]: slug,
            vzor.columns[6]: radek_akce.iloc[2],
            vzor.columns[7]: f"{datum_string} 23:59" if datum_string else "",
            vzor.columns[8]: f"{id_dlazdice.upper()}.jpg",
            vzor.columns[9]: id_znacky,
            vzor.columns[10]: ','.join(kody_zbozi)
        }
        vysledek = pd.concat([vysledek, pd.DataFrame([novy_radek])], ignore_index=True)
    
    progress_bar.progress(1.0)
    st.success("Zpracov√°n√≠ dokonƒçeno!")
    
    return vysledek


# Streamlit UI s konfigurac√≠ pro vƒõt≈°√≠ soubory
st.set_page_config(
    page_title="Gener√°tor marketingov√Ωch akc√≠",
    page_icon="üìä",
    layout="wide"
)

st.title("Gener√°tor marketingov√Ωch akc√≠ - Upraven√° verze s novou logikou klubov√© akce")
st.write("Nahrajte 3 po≈æadovan√© soubory ve form√°tu XLSX (podporuje a≈æ des√≠tky tis√≠c ≈ô√°dk≈Ø):")

# Pou≈æit√≠ obecn√©ho typu souboru m√≠sto specifikace p≈ô√≠pony
vazby_produktu_file = st.file_uploader("1. Soubor VAZBY produktu", type="xlsx", help="Excel soubor s vazbami produkt≈Ø")
vazby_akci_file = st.file_uploader("2. Soubor KEN (vazby akc√≠)", type="xlsx", help="Excel soubor s vazbami akc√≠")
zlm_file = st.file_uploader("3. Soubor ZLM", type="xlsx", help="Excel soubor ZLM (m≈Ø≈æe obsahovat tis√≠ce ≈ô√°dk≈Ø)")

st.markdown("---")
st.warning("‚ö†Ô∏è Zapnut√≠ pln√© diagnostiky m≈Ø≈æe v√Ωraznƒõ zpomalit zpracov√°n√≠ u velk√Ωch soubor≈Ø a zahltit obrazovku v√Ωpisy.")
full_diagnostics_checkbox = st.checkbox("Zobrazit detailn√≠ diagnostiku pro ka≈æd√Ω ≈ô√°dek")

if st.button("Spustit generov√°n√≠ s upravenou logikou klubov√© akce"):
    if all([vazby_produktu_file, vazby_akci_file, zlm_file]):
        try:
            with st.spinner('Naƒç√≠t√°m a zpracov√°v√°m data...'):
                vazby_produktu = nacti_velky_excel(vazby_produktu_file, "VAZBY produktu")
                vazby_akci = nacti_velky_excel(vazby_akci_file, "KEN (vazby akc√≠)")
                zlm = nacti_velky_excel(zlm_file, "ZLM")
                
                if vazby_produktu is None or vazby_akci is None or zlm is None:
                    st.error("Nepoda≈ôilo se naƒç√≠st v≈°echny soubory.")
                    st.stop()
                
                vysledek = zpracuj_soubory(vazby_produktu, vazby_akci, zlm, full_diagnostics_checkbox)
                
                if vysledek is not None:
                    timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
                    filename_timestamp = datetime.now().strftime('%Y%m%d_%H%M')
                    
                    csv = vysledek.to_csv(index=False, sep=';', encoding='utf-8-sig')
                    st.success(f"Generov√°n√≠ √∫spƒõ≈°nƒõ dokonƒçeno! (Datum a ƒças: {timestamp})")
                    st.download_button(
                        label="St√°hnout v√Ωsledn√Ω soubor",
                        data=csv,
                        file_name=f"vysledek_{filename_timestamp}.csv",
                        mime="text/csv"
                    )
                    
                    if st.checkbox("Zobrazit v√Ωslednou tabulku"):
                        st.dataframe(vysledek)
                        
                    st.write("**Statistiky zpracov√°n√≠:**")
                    st.write(f"- Zpracov√°no ≈ô√°dk≈Ø: {len(vysledek)}")
                    st.write(f"- ≈ò√°dky s vyplnƒõn√Ωmi k√≥dy zbo≈æ√≠: {len(vysledek[vysledek.iloc[:, 10] != ''])}")
                    st.write(f"- ≈ò√°dky bez k√≥d≈Ø zbo≈æ√≠: {len(vysledek[vysledek.iloc[:, 10] == ''])}")
                    st.write(f"- ≈ò√°dky s klubovou akc√≠ (sloupec B = 1): {len(vysledek[vysledek.iloc[:, 1] == 1])}")
                
        except Exception as e:
            st.error(f"Do≈°lo k chybƒõ: {str(e)}")
            import traceback
            st.error(f"Detaily chyby: {traceback.format_exc()}")
    else:
        st.warning("Pros√≠m, nahrajte v≈°echny po≈æadovan√© soubory!")

# P≈Øvodn√≠ expander bloky
with st.expander("üîß Informace o nov√© logice klubov√© akce"):
    st.write("""
    **Nov√° logika pro sloupec B (klubov√° akce):**
    
    **Sloupec B ve v√Ωsledku = 1**, pokud plat√≠ JAK√ÅKOLI z tƒõchto podm√≠nek:
    
    1. **Sloupec H z KEN souboru obsahuje "1"**
        - Nov√° podm√≠nka pro p≈ô√≠m√© oznaƒçen√≠ klubov√© akce v KEN souboru
    
    2. **ZLM obsahuje "MK" v sloupci M (index 12)**
        - P≈Øvodn√≠ logika na z√°kladƒõ klubov√© informace v ZLM
    
    3. **ID dla≈ædice zaƒç√≠n√° "sk"**
        - P≈Øvodn√≠ logika na z√°kladƒõ prefixu ID
    
    **Prov√°z√°n√≠ dat:**
    - Sloupec B z KEN ‚Üí Sloupec F v√Ωsledku (identifikace)
    - Sloupec H z KEN ‚Üí Logika pro sloupec B v√Ωsledku (klubov√° akce)
    
    **Diagnostika:**
    - Zobrazuje se, kter√° podm√≠nka zp≈Øsobila nastaven√≠ klubov√© akce
    - P≈ôidan√° statistika poƒçtu ≈ô√°dk≈Ø s klubovou akc√≠
    """)

with st.expander("üîß Informace o opravƒõ OBICIS normalizace"):
    st.write("""
    **Oprava probl√©mu s OBICIS k√≥dy:**
    
    **Probl√©m**: OBICIS k√≥dy se v r≈Øzn√Ωch souborech li≈°√≠ form√°tem √∫vodn√≠ch nul:
    - V souboru VAZBY: `32001256` (bez √∫vodn√≠ch nul)
    - V souboru ZLM: `0032001256` (s √∫vodn√≠mi nulami)
    
    **≈òe≈°en√≠**:
    1. **Funkce `normalize_obicis()`**: Odstra≈àuje √∫vodn√≠ nuly z OBICIS k√≥d≈Ø
    2. **Normalizace p≈ôi indexov√°n√≠**: V≈°echny OBICIS k√≥dy v ZLM jsou normalizov√°ny p≈ôi vytv√°≈ôen√≠ indexu
    3. **Normalizace p≈ôi vyhled√°v√°n√≠**: OBICIS k√≥dy z VAZBY jsou tak√© normalizov√°ny p≈ôed vyhled√°v√°n√≠m
    4. **Zachov√°n√≠ origin√°l≈Ø**: Pro diagnostiku se uchov√°vaj√≠ i origin√°ln√≠ form√°ty
    
    **V√Ωsledek**: 
    - `32001256` i `0032001256` se budou pova≈æovat za stejn√Ω k√≥d
    - Zv√Ω≈°√≠ se √∫spƒõ≈°nost p√°rov√°n√≠ OBICIS k√≥d≈Ø
    - Diagnostika uk√°≈æe jak origin√°ln√≠, tak normalizovan√© hodnoty
    """)
